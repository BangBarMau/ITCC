/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ITCC;

import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileWriter;  
import java.io.IOException;  
import java.io.InputStreamReader;
import java.io.FileInputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.Clock;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.Timer;

/**
 *
 * @author laes
 * 
 */
public class PRM extends javax.swing.JFrame 
{
    /**
     * Creates new form pda
     */
    public PRM() {
        initComponents();
        Clock();
    }
    Calendar cal = new GregorianCalendar();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fram = new javax.swing.JFrame();
        jfcho = new javax.swing.JFileChooser();
        inputpane = new javax.swing.JPanel();
        remname = new javax.swing.JTextField();
        namerem = new javax.swing.JLabel();
        remcont = new javax.swing.JLabel();
        inputpane2 = new javax.swing.JScrollPane();
        inputarea = new javax.swing.JTextArea();
        editpane = new javax.swing.JPanel();
        editpane2 = new javax.swing.JScrollPane();
        editarea = new javax.swing.JTextArea();
        remeditname = new javax.swing.JLabel();
        remeditcont = new javax.swing.JLabel();
        remnamedit = new javax.swing.JTextField();
        test = new javax.swing.JTabbedPane();
        reminderstab = new javax.swing.JPanel();
        remindercreate = new javax.swing.JButton();
        selectrem = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        remarea = new javax.swing.JTextArea();
        editbut = new javax.swing.JButton();
        deletefile = new javax.swing.JButton();
        listab = new javax.swing.JPanel();
        edit1 = new javax.swing.JButton();
        edit2 = new javax.swing.JButton();
        edit3 = new javax.swing.JButton();
        del1 = new javax.swing.JButton();
        del2 = new javax.swing.JButton();
        del3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        list1 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        list2 = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        list3 = new javax.swing.JTextArea();
        clist1 = new javax.swing.JButton();
        clist2 = new javax.swing.JButton();
        clist3 = new javax.swing.JButton();
        listlabel1 = new javax.swing.JLabel();
        listlabel2 = new javax.swing.JLabel();
        listlabel3 = new javax.swing.JLabel();
        dayte = new javax.swing.JLabel();
        clocktime = new javax.swing.JLabel();

        javax.swing.GroupLayout framLayout = new javax.swing.GroupLayout(fram.getContentPane());
        fram.getContentPane().setLayout(framLayout);
        framLayout.setHorizontalGroup(
            framLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        framLayout.setVerticalGroup(
            framLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jfcho.setCurrentDirectory(new File("."));

        namerem.setText("Name");

        remcont.setText("Content");

        inputarea.setColumns(20);
        inputarea.setRows(5);
        inputpane2.setViewportView(inputarea);
        inputarea.setLineWrap(true);
        inputarea.setWrapStyleWord(true);

        javax.swing.GroupLayout inputpaneLayout = new javax.swing.GroupLayout(inputpane);
        inputpane.setLayout(inputpaneLayout);
        inputpaneLayout.setHorizontalGroup(
            inputpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputpaneLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(inputpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(remcont)
                    .addComponent(namerem)
                    .addComponent(remname, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        inputpaneLayout.setVerticalGroup(
            inputpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputpaneLayout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addComponent(namerem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(remcont)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        inputpane.add(inputpane2);

        editpane.setPreferredSize(new java.awt.Dimension(308, 296));

        editarea.setColumns(20);
        editarea.setRows(5);
        editpane2.setViewportView(editarea);

        remeditname.setText("Name");

        remeditcont.setText("Content");

        remnamedit.setEditable(false);

        javax.swing.GroupLayout editpaneLayout = new javax.swing.GroupLayout(editpane);
        editpane.setLayout(editpaneLayout);
        editpaneLayout.setHorizontalGroup(
            editpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editpaneLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(editpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remnamedit, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(remeditname)
                    .addComponent(remeditcont))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        editpaneLayout.setVerticalGroup(
            editpaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editpaneLayout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(remeditname)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remnamedit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(remeditcont)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editpane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        test.setToolTipText("");
        test.setAutoscrolls(true);

        reminderstab.setToolTipText("Show Reminders");

        remindercreate.setText("Create");
        remindercreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remindercreateActionPerformed(evt);
            }
        });

        selectrem.setText("Select Reminder");
        selectrem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectremActionPerformed(evt);
            }
        });

        remarea.setEditable(false);
        remarea.setColumns(20);
        remarea.setRows(5);
        remarea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remareaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(remarea);

        editbut.setText("Edit");
        editbut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editbutActionPerformed(evt);
            }
        });

        deletefile.setText("Delete");
        deletefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletefileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reminderstabLayout = new javax.swing.GroupLayout(reminderstab);
        reminderstab.setLayout(reminderstabLayout);
        reminderstabLayout.setHorizontalGroup(
            reminderstabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderstabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reminderstabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(reminderstabLayout.createSequentialGroup()
                        .addComponent(selectrem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editbut, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deletefile, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addComponent(remindercreate, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        reminderstabLayout.setVerticalGroup(
            reminderstabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderstabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(reminderstabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(remindercreate)
                    .addComponent(selectrem)
                    .addComponent(editbut)
                    .addComponent(deletefile))
                .addGap(25, 25, 25))
        );

        test.addTab("Reminders", reminderstab);

        edit1.setText("Edit");
        edit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit1ActionPerformed(evt);
            }
        });

        edit2.setText("Edit");
        edit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit2ActionPerformed(evt);
            }
        });

        edit3.setText("Edit");
        edit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edit3ActionPerformed(evt);
            }
        });

        del1.setText("Delete");
        del1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del1ActionPerformed(evt);
            }
        });

        del2.setText("Delete");
        del2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del2ActionPerformed(evt);
            }
        });

        del3.setText("Delete");
        del3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                del3ActionPerformed(evt);
            }
        });

        list1.setEditable(false);
        list1.setColumns(20);
        list1.setRows(5);
        list1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list1);
        inputarea.setLineWrap(true);
        inputarea.setWrapStyleWord(true);

        list2.setEditable(false);
        list2.setColumns(20);
        list2.setRows(5);
        list2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list2MouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(list2);
        inputarea.setLineWrap(true);
        inputarea.setWrapStyleWord(true);

        list3.setEditable(false);
        list3.setColumns(20);
        list3.setRows(5);
        list3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list3MouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(list3);

        clist1.setText("Create");
        clist1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clist1ActionPerformed(evt);
            }
        });

        clist2.setText("Create");
        clist2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clist2ActionPerformed(evt);
            }
        });

        clist3.setText("Create");
        clist3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clist3ActionPerformed(evt);
            }
        });

        listlabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listlabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listlabel1.setText("List 1");
        listlabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        listlabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listlabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listlabel2.setText("List 2");
        listlabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        listlabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listlabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        listlabel3.setText("List 3");
        listlabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout listabLayout = new javax.swing.GroupLayout(listab);
        listab.setLayout(listabLayout);
        listabLayout.setHorizontalGroup(
            listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(listabLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(edit1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                        .addComponent(del1, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))
                    .addComponent(clist1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(listabLayout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(edit3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listabLayout.createSequentialGroup()
                        .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(del2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edit2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(del3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(listabLayout.createSequentialGroup()
                        .addComponent(clist2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clist3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(40, 40, 40))
            .addGroup(listabLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(listlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(listlabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(listlabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        listabLayout.setVerticalGroup(
            listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listabLayout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listlabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listlabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(listlabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clist1)
                    .addComponent(clist2)
                    .addComponent(clist3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edit1)
                    .addComponent(edit2)
                    .addComponent(edit3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(del1)
                    .addComponent(del2)
                    .addComponent(del3))
                .addContainerGap())
        );

        test.addTab("Lists", listab);

        dayte.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        clocktime.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(test)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dayte, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clocktime, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(clocktime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dayte, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(test)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void remindercreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remindercreateActionPerformed
        int rem=JOptionPane.showConfirmDialog(null, inputpane, "Input", JOptionPane.OK_CANCEL_OPTION);
          if (rem == JOptionPane.YES_OPTION) {
             String remnam=remname.getText();
             String remcont=inputarea.getText();
             fileWrite(remnam, remcont);
          }
    }//GEN-LAST:event_remindercreateActionPerformed

    private void selectremActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectremActionPerformed
      int returnVal = jfcho.showOpenDialog(fram);
      if (returnVal == jfcho.APPROVE_OPTION) 
      {
        File remnams = jfcho.getSelectedFile();
        fileRead(remnams);
      }
    }//GEN-LAST:event_selectremActionPerformed

    private void editbutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editbutActionPerformed
        int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileEdit(editnams, path);
        }
    }//GEN-LAST:event_editbutActionPerformed

    private void deletefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletefileActionPerformed
        int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileDelete(path);
            remarea.setText("");
        }
    }//GEN-LAST:event_deletefileActionPerformed

    private void edit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit1ActionPerformed
        int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileEditL(editnams, path, list1);
        }
    }//GEN-LAST:event_edit1ActionPerformed

    private void del1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del1ActionPerformed
         int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileDelete(path);
            list1.setText("");
            listlabel1.setText("List 1");
        }
    }//GEN-LAST:event_del1ActionPerformed

    private void del2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del2ActionPerformed
         int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileDelete(path);
            list2.setText("");
            listlabel2.setText("List 2");
        }
    }//GEN-LAST:event_del2ActionPerformed

    private void del3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_del3ActionPerformed
         int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileDelete(path);
            list3.setText("");
            listlabel3.setText("List 3");
        }
    }//GEN-LAST:event_del3ActionPerformed

    private void clist1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clist1ActionPerformed
        int rem=JOptionPane.showConfirmDialog(null, inputpane, "Input", JOptionPane.OK_CANCEL_OPTION);
            if (rem == JOptionPane.YES_OPTION) {
                String listname=remname.getText();
                String clist=inputarea.getText();
                fileWriteL(listname, clist);  
                list1.setText(clist);
                listlabel1.setText(listname);
            }
            else { 
            System.out.println("Canceled");
          }          
    }//GEN-LAST:event_clist1ActionPerformed

    private void clist2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clist2ActionPerformed
        int rem=JOptionPane.showConfirmDialog(null, inputpane, "Input", JOptionPane.OK_CANCEL_OPTION);
            if (rem == JOptionPane.YES_OPTION) {
                String listname=remname.getText();
                String clist=inputarea.getText();
                fileWriteL(listname, clist);
                list2.setText(clist);
                listlabel2.setText(listname);
            }
            else { 
            System.out.println("Canceled");
          }
    }//GEN-LAST:event_clist2ActionPerformed

    private void clist3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clist3ActionPerformed
        int rem=JOptionPane.showConfirmDialog(null, inputpane, "Input", JOptionPane.OK_CANCEL_OPTION);
            if (rem == JOptionPane.YES_OPTION) {
                String listname=remname.getText();
                String clist=inputarea.getText();
                fileWriteL(listname, clist);
                list3.setText(clist);
                listlabel3.setText(listname);
            }
            else{ 
            System.out.println("Canceled");
          }
    }//GEN-LAST:event_clist3ActionPerformed

    private void edit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit2ActionPerformed
        int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileEditL(editnams, path, list2);
        }
    }//GEN-LAST:event_edit2ActionPerformed

    private void edit3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edit3ActionPerformed
        int returnVal = jfcho.showOpenDialog(fram);
        if (returnVal == jfcho.APPROVE_OPTION)
        { 
            File editnams = jfcho.getSelectedFile();
            Path path = editnams.toPath();
            fileEditL(editnams, path, list2);
        }
    }//GEN-LAST:event_edit3ActionPerformed

    private void remareaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remareaMouseClicked
         if (evt.getClickCount() == 2) {
              int returnVal = jfcho.showOpenDialog(fram);
                 if (returnVal == jfcho.APPROVE_OPTION) 
                 {
                   File remnams = jfcho.getSelectedFile();
                    fileRead(remnams);
                 }
         }
    }//GEN-LAST:event_remareaMouseClicked

    private void list1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list1MouseClicked
        if (evt.getClickCount() == 2) {
              int returnVal = jfcho.showOpenDialog(fram);
                 if (returnVal == jfcho.APPROVE_OPTION) 
                 {
                   File remnams = jfcho.getSelectedFile();
                    fileReadL(remnams, list1);
                    String filename = remnams.getName();
                    listlabel1.setText(filename);
                 }
         }
    }//GEN-LAST:event_list1MouseClicked

    private void list2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list2MouseClicked
        if (evt.getClickCount() == 2) {
              int returnVal = jfcho.showOpenDialog(fram);
                 if (returnVal == jfcho.APPROVE_OPTION) 
                 {
                   File remnams = jfcho.getSelectedFile();
                    fileReadL(remnams, list2);
                    String filename = remnams.getName();
                    listlabel2.setText(filename);
                 }
         }
    }//GEN-LAST:event_list2MouseClicked

    private void list3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list3MouseClicked
        if (evt.getClickCount() == 2) {
              int returnVal = jfcho.showOpenDialog(fram);
                 if (returnVal == jfcho.APPROVE_OPTION) 
                 {
                   File remnams = jfcho.getSelectedFile();
                    fileReadL(remnams, list3);
                    String filename = remnams.getName();
                    listlabel3.setText(filename);
                 }
         }
    }//GEN-LAST:event_list3MouseClicked

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
            
        String way = System.getProperty("user.dir");
        System.out.println(way);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PRM().setVisible(true);
            }
        });
        String remnam;
        String remcont;
    }
    
    private void Clock(){
        try{
            Timer timeer = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e){
                   Calendar cal1 = new GregorianCalendar();
                   Calendar cal2 = cal1.getInstance();
                   
                   String date = new SimpleDateFormat("MM'-'dd'-'YYYY").format(Calendar.getInstance().getTime());
                   String time = new SimpleDateFormat("hh':'mm").format(Calendar.getInstance().getTime());
                   
                   String am_pm;
                   if(cal1.get(Calendar.AM_PM)==0){
                       am_pm = "AM";
                   }
                   else {
                       am_pm = "PM";
                   }  
                   clocktime.setText(time+" "+am_pm);
                   dayte.setText(date);
                }
            });
            timeer.start();
        }catch(Exception e){
           e.printStackTrace();
        }
    }
    
    
    public static void fileWrite(String name, String cont){
         try{
                 File fil = new File(name+"txt");
                 try (FileWriter writ = new FileWriter(name+" - Reminder")) {
                     writ.write(cont);
                 }    
             }
             catch(IOException e){
                 e.printStackTrace();               
             }   
    }
    
    public static void fileWriteL(String name, String cont){
        try{
                 File fil = new File(name+"txt");
                 try (FileWriter writ = new FileWriter(name+" - List")) {
                     writ.write(cont);
                 }
             }
             catch(IOException e){
                 e.printStackTrace();               
             }  
    }
    
    public static void fileEdit(File file, Path path){
                  try{                  
                  BufferedReader input = new BufferedReader(new InputStreamReader(
                   new FileInputStream(file)));
                   editarea.read(input, "");
                   Files.newBufferedWriter(path , StandardOpenOption.TRUNCATE_EXISTING);
                   try{
                    int edi=JOptionPane.showConfirmDialog(null, editpane, "Edit", JOptionPane.OK_CANCEL_OPTION);
                    if (edi == JOptionPane.YES_OPTION) {
                        String editedcont=editarea.getText();                      
                        try{
                            Files.write(path, editedcont.getBytes(), StandardOpenOption.WRITE);
                        }
                        catch(IOException e){
                            e.printStackTrace();
                        }
                        remarea.setText(editedcont);
                    }
                    else{
                        System.out.println("Canceled");
                    }
                }
                catch(HeadlessException e){
                    e.printStackTrace();
                }
            }
            catch(IOException e){   
                e.printStackTrace();
            }
    }
    
    public static void fileEditL(File file, Path path, JTextArea area){
        try{                  
                  BufferedReader input = new BufferedReader(new InputStreamReader(
                   new FileInputStream(file)));
                   editarea.read(input, "");
                   Files.newBufferedWriter(path , StandardOpenOption.TRUNCATE_EXISTING);
                   try{
                    int edi=JOptionPane.showConfirmDialog(null, editpane, "Edit", JOptionPane.OK_CANCEL_OPTION);
                    if (edi == JOptionPane.YES_OPTION) {
                        String editedcont=editarea.getText();                      
                        try{
                            Files.write(path, editedcont.getBytes(), StandardOpenOption.WRITE);
                        }
                        catch(IOException e){
                            e.printStackTrace();
                        }
                        list1.setText(editedcont);
                    }
                    else{
                        System.out.println("Canceled");
                    }
                }
                catch(HeadlessException e){
                    e.printStackTrace();
                }
            }
            catch(IOException e){    
                e.printStackTrace();
            }
    } 
    
    public static void fileDelete(Path path){
         try{
                Files.delete(path);
            }
            catch(IOException e){         
                e.printStackTrace();
            }
    }
            
    public static void fileRead(File file){
        try {
          BufferedReader input = new BufferedReader(new InputStreamReader(
              new FileInputStream(file)));
                remarea.read(input, "");
        }
        catch (Exception e) {
          e.printStackTrace();
        }
    }
    
    public static void fileReadL(File file, JTextArea area){
        try {
          BufferedReader input = new BufferedReader(new InputStreamReader(
              new FileInputStream(file)));
                area.read(input, "");
        }
        catch (Exception e) {
          e.printStackTrace();
        }
        
    }
    
    

    
    
    
        
   
    
    
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clist1;
    private javax.swing.JButton clist2;
    private javax.swing.JButton clist3;
    private static javax.swing.JLabel clocktime;
    private static javax.swing.JLabel dayte;
    private javax.swing.JButton del1;
    private javax.swing.JButton del2;
    private javax.swing.JButton del3;
    private javax.swing.JButton deletefile;
    private javax.swing.JButton edit1;
    private javax.swing.JButton edit2;
    private javax.swing.JButton edit3;
    private static javax.swing.JTextArea editarea;
    private javax.swing.JButton editbut;
    private static javax.swing.JPanel editpane;
    private javax.swing.JScrollPane editpane2;
    private javax.swing.JFrame fram;
    private javax.swing.JTextArea inputarea;
    private javax.swing.JPanel inputpane;
    private javax.swing.JScrollPane inputpane2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JFileChooser jfcho;
    private static javax.swing.JTextArea list1;
    private static javax.swing.JTextArea list2;
    private static javax.swing.JTextArea list3;
    private javax.swing.JPanel listab;
    private javax.swing.JLabel listlabel1;
    private javax.swing.JLabel listlabel2;
    private javax.swing.JLabel listlabel3;
    private javax.swing.JLabel namerem;
    private static javax.swing.JTextArea remarea;
    private javax.swing.JLabel remcont;
    private javax.swing.JLabel remeditcont;
    private javax.swing.JLabel remeditname;
    private javax.swing.JButton remindercreate;
    private javax.swing.JPanel reminderstab;
    private static javax.swing.JTextField remname;
    private javax.swing.JTextField remnamedit;
    private javax.swing.JButton selectrem;
    private javax.swing.JTabbedPane test;
    // End of variables declaration//GEN-END:variables
        
}
